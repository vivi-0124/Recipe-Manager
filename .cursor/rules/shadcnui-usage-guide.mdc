---
description: 
globs: *.tsx
alwaysApply: false
---
# shadcn/ui 使用ガイド

## 📋 概要

shadcn/uiは、React + TypeScript + Tailwind CSSで構築された美しく再利用可能なコンポーネントライブラリです。このプロジェクトでは、一貫性のあるUIを提供するためにshadcn/uiを採用しています。

## 🎯 基本原則

### ✅ 必須ルール
- **常にshadcn/uiコンポーネントを使用**する
- カスタムUIコンポーネントは作成しない
- 既存のshadcn/uiコンポーネントで対応できない場合のみ相談

### 🎨 デザイン統一
- 一貫したスタイリング
- アクセシビリティ対応
- レスポンシブデザイン

## 📦 利用可能なコンポーネント

### フォーム関連
```tsx
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
```

### レイアウト
```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
```

### フィードバック
```tsx
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Toast } from '@/components/ui/toast'
```

### ナビゲーション
```tsx
import { Button } from '@/components/ui/button'
import { Toggle } from '@/components/ui/toggle'
```

### ダイアログ
```tsx
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog'
```

## 💡 使用例

### 基本的なフォーム
```tsx
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'

function MyForm() {
  return (
    <div className="space-y-4">
      <div>
        <Label htmlFor="name">名前</Label>
        <Input id="name" placeholder="名前を入力" />
      </div>
      <Button type="submit">送信</Button>
    </div>
  )
}
```

### カード形式のレイアウト
```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

function MyCard() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>タイトル</CardTitle>
        <CardDescription>説明文</CardDescription>
      </CardHeader>
      <CardContent>
        <p>コンテンツ</p>
      </CardContent>
    </Card>
  )
}
```

### 選択可能なボタン
```tsx
import { Button } from '@/components/ui/button'

function SelectableButton({ isSelected, onClick, children }) {
  return (
    <Button
      variant="outline"
      onClick={onClick}
      className={`${
        isSelected
          ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600'
          : 'bg-transparent text-gray-700 border-gray-300 hover:bg-gray-50'
      }`}
    >
      {children}
    </Button>
  )
}
```

## 🎨 スタイリングのベストプラクティス

### バリアント使用
```tsx
// ✅ 良い例
<Button variant="outline">アウトライン</Button>
<Button variant="destructive">削除</Button>
<Badge variant="secondary">セカンダリ</Badge>

// ❌ 悪い例
<button className="custom-button">カスタムボタン</button>
```

### サイズ指定
```tsx
// ✅ 良い例
<Button size="sm">小さいボタン</Button>
<Button size="lg">大きいボタン</Button>

// ❌ 悪い例
<Button className="h-8 w-8">カスタムサイズ</Button>
```

### 条件付きスタイリング
```tsx
// ✅ 良い例
<Button
  variant={isActive ? "default" : "outline"}
  className={isActive ? "bg-blue-600" : ""}
>
  切り替えボタン
</Button>
```

## 🔧 カスタマイゼーション

### クラス名の追加
```tsx
// ✅ 追加のスタイリングが必要な場合
<Button className="w-full mt-4">
  全幅ボタン
</Button>

<Card className="border-red-200">
  エラー用カード
</Card>
```

### 状態管理との組み合わせ
```tsx
function ToggleExample() {
  const [isSelected, setIsSelected] = useState(false)
  
  return (
    <Button
      variant="outline"
      onClick={() => setIsSelected(!isSelected)}
      className={isSelected ? "bg-blue-600 text-white" : ""}
    >
      {isSelected ? "選択済み" : "未選択"}
    </Button>
  )
}
```

## 📱 レスポンシブデザイン

### グリッドレイアウト
```tsx
<div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
  {items.map(item => (
    <Button key={item.id} variant="outline">
      {item.name}
    </Button>
  ))}
</div>
```

### モバイル対応
```tsx
<div className="flex flex-col sm:flex-row gap-2">
  <Button className="w-full sm:w-auto">ボタン1</Button>
  <Button className="w-full sm:w-auto">ボタン2</Button>
</div>
```

## ⚠️ 注意事項

### やってはいけないこと
- ❌ カスタムUIコンポーネントの作成
- ❌ shadcn/uiのスタイルを直接上書き
- ❌ インラインスタイルの使用

### 推奨される方法
- ✅ shadcn/uiコンポーネントの組み合わせ
- ✅ Tailwind CSSクラスでの調整
- ✅ variantとsizeプロパティの活用

## 🚀 パフォーマンス

### 最適化のポイント
- 必要なコンポーネントのみをimport
- 条件付きレンダリングの活用
- メモ化の適切な使用

```tsx
// ✅ 良い例
import { Button } from '@/components/ui/button'

// ❌ 悪い例
import * as UI from '@/components/ui'
```

## 📚 参考リンク

- [shadcn/ui 公式ドキュメント](https://ui.shadcn.com/)
- [Tailwind CSS ドキュメント](https://tailwindcss.com/docs)
- [Radix UI プリミティブ](https://www.radix-ui.com/)

---

**このガイドに従って、一貫性のある美しいUIを構築しましょう！**